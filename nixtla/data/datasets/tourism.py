# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/datasets_tourism.ipynb (unless otherwise specified).

__all__ = ['SOURCE_URL', 'Yearly', 'Quarterly', 'Monthly', 'TourismInfo', 'Tourism']

# Cell
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union

import numpy as np
import pandas as pd

from .utils import download_file, Info, TimeSeriesDataclass

# Cell
SOURCE_URL = 'https://robjhyndman.com/data/27-3-Athanasopoulos1.zip'

# Cell
@dataclass
class Yearly:
    seasonality: int = 1
    horizon: int = 4
    freq: str = 'D'
    rows: int = 2
    name: str = 'Yearly'

@dataclass
class Quarterly:
    seasonality: int = 4
    horizon: int = 8
    freq: str = 'Q'
    rows: int = 3
    name: str = 'Quarterly'

@dataclass
class Monthly:
    seasonality: int = 12
    horizon: int = 24
    freq: str = 'M'
    rows: int = 3
    name: str = 'Monthly'

# Cell
TourismInfo = Info(groups=('Yearly', 'Quarterly', 'Monthly'),
                   class_groups=(Yearly, Quarterly, Monthly))

# Cell
class Tourism(TimeSeriesDataclass):

    @staticmethod
    def load(directory: str,
             group: str,
             training: bool = True) -> 'Tourism':
        """
        Downloads and loads Tourism data.

        Parameters
        ----------
        directory: str
            Directory where data will be downloaded.
        group: str
            Group name.
            Allowed groups: 'Yearly', 'Quarterly', 'Monthly'.
        training: bool
            Wheter return training or testing data. Default True.
        """
        path = Path(directory) / 'tourism' / 'datasets'

        Tourism.download(directory)

        class_group = TourismInfo.get_group(group)

        if training:
            file = path / f'{class_group.name.lower()}_in.csv'
        else:
            file = path / f'{class_group.name.lower()}_oos.csv'

        df = pd.read_csv(file)

        dfs = []
        for col in df.columns:
            df_col = df[col]
            length, year = df_col[:2].astype(int)
            skip_rows = class_group.rows

            df_col = df_col[skip_rows:length + skip_rows]
            df_col = df_col.rename('y').to_frame()
            df_col['unique_id'] = col
            freq = pd.tseries.frequencies.to_offset(class_group.name[0])
            df_col['ds'] = pd.date_range(f'{year}-01-01', periods=length, freq=freq)

            dfs.append(df_col)

        df = pd.concat(dfs)

        df = df.reset_index().filter(items=['unique_id', 'ds', 'y'])

        return Tourism(Y=df, S=None, X=None)

    @staticmethod
    def download(directory: str) -> None:
        """Downloads Tourism Dataset."""
        path = Path(directory) / 'tourism' / 'datasets'
        if not path.exists():
            download_file(path, SOURCE_URL, decompress=True)