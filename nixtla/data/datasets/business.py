# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/data_datasets__business.ipynb (unless otherwise specified).

__all__ = ['BRC', 'GLB', 'BusinessInfo', 'Business']

# Cell
import os
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union

import numpy as np
import pandas as pd
import s3fs
from dotenv import load_dotenv

from .utils import download_file, Info, TimeSeriesDataclass
from ..tsdataset import TimeSeriesDataset

# Cell
load_dotenv()

# Cell
@dataclass
class BRC:
    seasonality: int = 7
    horizon: int = 7

@dataclass
class GLB:
    seasonality: int = 7
    horizon: int = 7

# Cell
BusinessInfo = Info(groups=('BRC', 'GLB'),
                    class_groups=(BRC, GLB))

# Cell
class Business(TimeSeriesDataclass):

    @staticmethod
    def load(directory: str,
             group: str,
             return_tensor: bool = True,
             return_weekly: bool = False) -> Tuple[pd.DataFrame,
                                                   Optional[pd.DataFrame],
                                                   Optional[pd.DataFrame]]:
        """
        Downloads and loads Tourism data.

        Parameters
        ----------
        directory: str
            Directory where data will be downloaded.
        group: str
            Group name.
            Allowed groups: 'D1', 'D2'.

        Notes
        -----
        [1] Returns train+test sets.
        """
        path = Path(directory) / 'business' / 'datasets'

        Business.download(directory, group)

        df = pd.read_csv(path / f'ts-{group.lower()}.csv')
        df['ds'] = pd.to_datetime(df['ds'])

        if return_weekly:
            df = df.groupby(['unique_id', pd.Grouper(key='ds', freq='W-THU')]) \
                   .sum() \
                   .reset_index()

        return df, None, None

    @staticmethod
    def download(directory: str, group: str) -> None:
        """Downloads Business Dataset."""

        fs = s3fs.S3FileSystem(key=os.environ['AWS_ACCES_KEY_ID'],
                               secret=os.environ['AWS_SECRET_ACCESS_KEY'])

        path = Path(directory) / 'business' / 'datasets'
        download_file = path / f'ts-{group.lower()}.csv'
        if not download_file.exists():
            file = f'research-storage-orax/business-data/ts-{group.lower()}.csv'
            fs.download(file, str(download_file))