# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/models_wnbeats__nbeats.ipynb (unless otherwise specified).

__all__ = ['init_weights', 'Nbeats']

# Cell
import os
import time
import numpy as np
import pandas as pd
import random
from collections import defaultdict
import copy

import torch as t
from torch import optim
from pathlib import Path
from functools import partial

from .nbeats_model import NBeats, NBeatsBlock, IdentityBasis, TrendBasis, SeasonalityBasis
from .nbeats_model import XBasisTCN, XBasisWavenet
from ...losses.pytorch import MAPELoss, MASELoss, SMAPELoss, MSELoss, MAELoss, RMSELoss
from ...losses.numpy import mae, mse, mape, smape, rmse

# Cell
def init_weights(module, initialization):
    if type(module) == t.nn.Linear:
        if initialization == 'Orthogonal':
            t.nn.init.orthogonal_(module.weight)
        elif initialization == 'he_uniform':
            t.nn.init.kaiming_uniform_(module.weight)
        elif initialization == 'he_normal':
            t.nn.init.kaiming_normal_(module.weight)
        elif initialization == 'glorot_uniform':
            t.nn.init.xavier_uniform_(module.weight)
        elif initialization == 'glorot_normal':
            t.nn.init.xavier_normal_(module.weight)
        elif initialization == 'lecun_normal':
            pass #t.nn.init.normal_(module.weight, 0.0, std=1/np.sqrt(module.weight.numel()))
        else:
            assert 1<0, f'Initialization {initialization} not found'

class Nbeats(object):
    """
    Future documentation
    """
    SEASONALITY_BLOCK = 'seasonality'
    TREND_BLOCK = 'trend'
    IDENTITY_BLOCK = 'identity'

    def __init__(self,
                 n_x_t,
                 n_x_s,
                 t_cols,
                 include_var_dict,
                 input_size_multiplier,
                 output_size,
                 shared_weights,
                 activation,
                 initialization,
                 stack_types,
                 n_blocks,
                 n_theta_hidden_list,
                 n_xbasis_layers,
                 n_xbasis_channels,
                 n_s_hidden,
                 scaler,
                 batch_normalization,
                 learning_rate,
                 lr_decay,
                 n_lr_decay_steps,
                 dropout_prob_theta,
                 dropout_prob_xbasis,
                 lambda_l1_theta,
                 lambda_l1_input,
                 lambda_l2_xbasis,
                 max_iterations,
                 early_stopping,
                 loss,
                 frequency,
                 seasonality,
                 random_seed,
                 device=None):
        super(Nbeats, self).__init__()

        if activation == 'selu': initialization = 'lecun_normal'

        # Attributes of ts_dataset
        # TODO: pensar como quitar redundancia
        self.n_x_t  = n_x_t
        self.n_x_s  = n_x_s
        self.t_cols = t_cols
        self.include_var_dict = include_var_dict

        # Architecture parameters
        self.input_size            = int(input_size_multiplier*output_size)
        self.output_size           = output_size
        self.shared_weights        = shared_weights
        self.activation            = activation
        self.initialization        = initialization
        self.stack_types           = stack_types
        self.n_blocks              = n_blocks
        self.n_theta_hidden_list   = n_theta_hidden_list
        self.n_xbasis_layers       = n_xbasis_layers
        self.n_xbasis_channels     = n_xbasis_channels
        self.n_s_hidden            = n_s_hidden

        # Regularization and optimization parameters
        self.scaler                = scaler
        self.batch_normalization   = batch_normalization
        self.learning_rate         = learning_rate
        self.lr_decay              = lr_decay
        self.n_lr_decay_steps      = n_lr_decay_steps
        # self.weight_decay         = weight_decay

        self.loss                  = loss
        self.dropout_prob_theta    = dropout_prob_theta
        self.dropout_prob_xbasis   = dropout_prob_xbasis
        self.lambda_l1_theta       = lambda_l1_theta
        self.lambda_l1_input       = lambda_l1_input
        self.lambda_l2_xbasis      = lambda_l2_xbasis
        self.max_iterations        = max_iterations
        self.early_stopping        = early_stopping

        # Regularization and optimization parameters
        self.frequency   = frequency
        self.seasonality = seasonality
        self.random_seed = random_seed

        if device is None: device = 'cuda' if t.cuda.is_available() else 'cpu'
        self.device = device
        self._is_instantiated = False

    def create_stack(self):
        if self.include_var_dict is not None:
            x_t_n_inputs = self.output_size * int(sum([len(x) for x in self.include_var_dict.values()]))

            # Correction because week_day only adds 1 no output_size
            if len(self.include_var_dict['week_day'])>0:
                x_t_n_inputs = x_t_n_inputs - self.output_size + 1
        else:
            x_t_n_inputs = self.input_size

        # Architecture definition
        block_list = []
        for i in range(len(self.stack_types)):
            #print(f'| --  Stack {self.stack_types[i]} (#{i})')
            for block_id in range(self.n_blocks[i]):
                # Batch norm only on first block
                if (len(block_list)==0) and (self.batch_normalization):
                    batch_normalization_block = True
                else:
                    batch_normalization_block = False

                # Shared weights
                if self.shared_weights and block_id>0:
                    nbeats_block = block_list[-1]

                else:
                    if self.stack_types[i] == 'identity':
                        nbeats_block = NBeatsBlock(x_t_n_inputs = x_t_n_inputs,
                                                   x_s_n_inputs = self.n_x_s,
                                                   x_s_n_hidden= self.n_s_hidden,
                                                   theta_n_dim=self.input_size + self.output_size,
                                                   basis=IdentityBasis(backcast_size=self.input_size,
                                                                       forecast_size=self.output_size),
                                                   n_theta_hidden_list=self.n_theta_hidden_list[i],
                                                   include_var_dict=self.include_var_dict,
                                                   t_cols=self.t_cols,
                                                   batch_normalization=batch_normalization_block,
                                                   dropout_prob=self.dropout_prob_theta,
                                                   activation=self.activation)
                    elif self.stack_types[i] == 'exogenous_tcn':
                        #assert len(self.f_cols)>0, 'If Xbasis, provide f_cols hyperparameter'
                        nbeats_block = NBeatsBlock(x_t_n_inputs = x_t_n_inputs,
                                                   x_s_n_inputs = self.n_x_s,
                                                   x_s_n_hidden = self.n_s_hidden,
                                                   theta_n_dim = 2*(self.n_xbasis_channels),
                                                   basis=XBasisTCN(out_features=self.n_xbasis_channels,
                                                                   in_features=self.n_x_t,
                                                                   #f_idxs=self.f_idxs,
                                                                   num_levels=self.n_xbasis_layers,
                                                                   dropout_prob=self.dropout_prob_xbasis),
                                                   n_theta_hidden_list=self.n_theta_hidden_list[i],
                                                   include_var_dict=self.include_var_dict,
                                                   t_cols=self.t_cols,
                                                   batch_normalization=batch_normalization_block,
                                                   dropout_prob=self.dropout_prob_theta,
                                                   activation=self.activation)
                    elif self.stack_types[i] == 'exogenous_wavenet':
                        #assert len(self.f_cols)>0, 'If Xbasis, provide f_cols hyperparameter'
                        nbeats_block = NBeatsBlock(x_t_n_inputs = x_t_n_inputs,
                                                   x_s_n_inputs = self.n_x_s,
                                                   x_s_n_hidden = self.n_s_hidden,
                                                   theta_n_dim = 2*(self.n_xbasis_channels),
                                                   basis=XBasisWavenet(out_features=self.n_xbasis_channels,
                                                                       in_features=self.n_x_t,
                                                                       #f_idxs=self.f_idxs,
                                                                       num_levels=self.n_xbasis_layers,
                                                                       dropout_prob=self.dropout_prob_xbasis),
                                                   n_theta_hidden_list=self.n_theta_hidden_list[i],
                                                   include_var_dict=self.include_var_dict,
                                                   t_cols=self.t_cols,
                                                   batch_normalization=batch_normalization_block,
                                                   dropout_prob=self.dropout_prob_theta,
                                                   activation=self.activation)

                # Select type of evaluation and apply it to all layers of block
                init_function = partial(init_weights, initialization=self.initialization)
                nbeats_block.layers.apply(init_function)
                block_list.append(nbeats_block)
        return block_list

    def __loss_fn(self, loss_name: str):
        def loss(x, freq, forecast, target, mask):
            if loss_name == 'MAPE':
                return MAPELoss(y=target, y_hat=forecast, mask=mask) + \
                       self.reg_loss_theta() + self.reg_loss_xbasis()
            elif loss_name == 'MASE':
                return MASELoss(y=target, y_hat=forecast, y_insample=x, seasonality=freq, mask=mask) + \
                       self.reg_loss_theta() + self.reg_loss_xbasis()
            elif loss_name == 'SMAPE':
                return SMAPELoss(y=target, y_hat=forecast, mask=mask) + self.l1_regularization() + \
                       self.reg_loss_theta() + self.reg_loss_xbasis()
            elif loss_name == 'MSE':
                return MSELoss(y=target, y_hat=forecast, mask=mask) + \
                       self.reg_loss_theta() + self.reg_loss_xbasis()
            elif loss_name == 'RMSE':
                return RMSELoss(y=target, y_hat=forecast, mask=mask) + \
                       self.reg_loss_theta() + self.reg_loss_xbasis()
            elif loss_name == 'MAE':
                return MAELoss(y=target, y_hat=forecast, mask=mask) + \
                       self.reg_loss_theta() + self.reg_loss_xbasis()
            else:
                raise Exception(f'Unknown loss function: {loss_name}')
        return loss

    def __val_loss_fn(self, loss_name: str):
        #TODO: mase not implemented
        def loss(forecast, target, weights):
            if loss_name == 'MAPE':
                return mape(y=target, y_hat=forecast, weights=weights) #TODO: faltan weights
            elif loss_name == 'SMAPE':
                return smape(y=target, y_hat=forecast, weights=weights) #TODO: faltan weights
            elif loss_name == 'MSE':
                return mse(y=target, y_hat=forecast, weights=weights)
            elif loss_name == 'RMSE':
                return rmse(y=target, y_hat=forecast, weights=weights)
            elif loss_name == 'MAE':
                return mae(y=target, y_hat=forecast, weights=weights)
            else:
                raise Exception(f'Unknown loss function: {loss_name}')
        return loss

    def reg_loss_xbasis(self):
        loss = 0.0
        for i in range(len(self.stack_types)):
            for block_id in range(self.n_blocks[i]):
                if self.stack_types[i] == 'exogenous_tcn':
                    for layer in self.model.blocks[i].modules():
                        if isinstance(layer, t.nn.Conv1d):
                            loss += self.lambda_l2_xbasis * t.norm(layer.weight)
        return loss

    def reg_loss_theta(self):
        # L1 loss for initial exogenous input
        loss = self.lambda_l1_input * t.sum(t.abs(self.model.l1_weight))

        # L2/L1 regularization for thetas
        for i in range(len(self.stack_types)):
            for block_id in range(self.n_blocks[i]):
                for layer in self.model.blocks[i].modules():
                    if isinstance(layer, t.nn.Linear):
                        # loss += self.lambda_reg_theta * t.norm(layer.weight)
                        loss += self.lambda_l1_theta * layer.weight.abs().sum()
        return loss

    def to_tensor(self, x: np.ndarray) -> t.Tensor:
        tensor = t.as_tensor(x, dtype=t.float32).to(self.device)
        return tensor

    def evaluate_performance(self, ts_loader, validation_loss_fn):
        #TODO: mas opciones que mae
        self.model.eval()

        losses = []
        with t.no_grad():
            for batch in iter(ts_loader):
                insample_y     = self.to_tensor(batch['insample_y'])
                insample_x     = self.to_tensor(batch['insample_x'])
                insample_mask  = self.to_tensor(batch['insample_mask'])
                outsample_x    = self.to_tensor(batch['outsample_x'])
                outsample_y    = self.to_tensor(batch['outsample_y'])
                outsample_mask = self.to_tensor(batch['outsample_mask'])
                s_matrix       = self.to_tensor(batch['s_matrix'])

                forecast = self.model(insample_y=insample_y, insample_x_t=insample_x,
                                      insample_mask=insample_mask, outsample_x_t=outsample_x, x_s=s_matrix)
                batch_loss = validation_loss_fn(target=forecast.cpu().data.numpy(),
                                                forecast=outsample_y.cpu().data.numpy(),
                                                weights=outsample_mask.cpu().data.numpy())
                losses.append(batch_loss)
                #break #TODO: remove this in future
        loss = np.mean(losses)
        self.model.train()
        return loss

    def fit(self, train_ts_loader, val_ts_loader=None, max_epochs=None, verbose=True, eval_steps=1):
        # Asserts
        assert self.t_cols[0] == 'y', f'First variable must be y not {self.t_cols[0]}'
        #assert (self.input_size)==train_ts_loader.input_size, \
        #    f'model input_size {self.input_size} data input_size {train_ts_loader.input_size}'

        # Random Seeds (model initialization)
        t.manual_seed(self.random_seed)
        np.random.seed(self.random_seed)
        random.seed(self.random_seed) #TODO: interaccion rara con window_sampling de validacion

        # Instantiate model
        if not self._is_instantiated:
            block_list = self.create_stack()
            self.model = NBeats(blocks=t.nn.ModuleList(block_list), in_features=self.n_x_t).to(self.device)
            self._is_instantiated = True

        # Overwrite max_epochs and train datasets
        if max_epochs is None:
            max_epochs = self.max_epochs

        train_dataloader = iter(train_ts_loader)

        lr_decay_steps = max_epochs // self.n_lr_decay_steps
        if lr_decay_steps == 0:
            lr_decay_steps = 1

        #optimizer = optim.Adam(self.model.parameters(), lr=self.learning_rate, weight_decay=self.weight_decay)
        optimizer = optim.Adam(self.model.parameters(), lr=self.learning_rate)
        lr_scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=lr_decay_steps, gamma=self.lr_decay)

        training_loss_fn = self.__loss_fn(self.loss)
        validation_loss_fn = self.__val_loss_fn(self.loss) #Uses numpy losses

        if verbose and (max_epochs > 0):
            print('='*30+' Start fitting '+'='*30)
            print(f'Number of exogenous variables: {self.n_x_t}')
            print(f'Number of static variables: {self.n_x_s} , with dim_hidden: {self.n_s_hidden}')
            print(f'Number of iterations: {max_epochs}')
            print(f'Number of blocks: {len(self.model.blocks)}')

        #self.loss_dict = {} # Restart self.loss_dict
        start = time.time()
        self.trajectories = {'step':[],'train_loss':[], 'val_loss':[]}
        self.final_insample_loss = None
        self.final_outsample_loss = None

        # Training Loop
        best_val_loss = np.inf
        break_flag = False
        for step in range(max_epochs):
            for batch in iter(train_dataloader):
                self.model.train()
                #train_ts_loader.train()

                batch = next(train_dataloader)
                insample_y     = self.to_tensor(batch['insample_y'])
                insample_x     = self.to_tensor(batch['insample_x'])
                insample_mask  = self.to_tensor(batch['insample_mask'])
                outsample_x    = self.to_tensor(batch['outsample_x'])
                outsample_y    = self.to_tensor(batch['outsample_y'])
                outsample_mask = self.to_tensor(batch['outsample_mask'])
                s_matrix       = self.to_tensor(batch['s_matrix'])

                optimizer.zero_grad()
                forecast = self.model(insample_y=insample_y, insample_x_t=insample_x,
                                    insample_mask=insample_mask, outsample_x_t=outsample_x, x_s=s_matrix)

                training_loss = training_loss_fn(x=insample_y, freq=self.seasonality, forecast=forecast,
                                                target=outsample_y, mask=outsample_mask)

                if np.isnan(float(training_loss)):
                    break

                training_loss.backward()
                t.nn.utils.clip_grad_norm_(self.model.parameters(), 1.0)
                optimizer.step()

            lr_scheduler.step()
            if (step % eval_steps == 0):
                display_string = 'Step: {}, Time: {:03.3f}, Insample {}: {:.5f}'.format(step,
                                                                                time.time()-start,
                                                                                self.loss,
                                                                                training_loss.cpu().data.numpy())
                self.trajectories['step'].append(step)
                self.trajectories['train_loss'].append(training_loss.cpu().data.numpy())

                if val_ts_loader is not None:
                    loss = self.evaluate_performance(val_ts_loader, validation_loss_fn=validation_loss_fn)
                    display_string += ", Outsample {}: {:.5f}".format(self.loss, loss)
                    self.trajectories['val_loss'].append(loss)

                    if self.early_stopping:
                        if loss < best_val_loss:
                            # Save current model if improves outsample loss
                            best_state_dict = copy.deepcopy(self.model.state_dict())
                            best_insample_loss = training_loss.cpu().data.numpy()
                            early_stopping_counter = 0
                            best_val_loss = loss
                        else:
                            early_stopping_counter += 1
                        if early_stopping_counter >= self.early_stopping:
                            break_flag = True

                print(display_string)

                self.model.train()
                #train_ts_loader.train()

            if break_flag:
                print(10*'-',' Stopped training by early stopping', 10*'-')
                self.model.load_state_dict(best_state_dict)
                break

        #End of fitting
        if max_epochs > 0:
            self.final_insample_loss = training_loss.cpu().data.numpy() if not break_flag else best_insample_loss #This is batch!
            string = 'Step: {}, Time: {:03.3f}, Insample {}: {:.5f}'.format(step,
                                                                            time.time()-start,
                                                                            self.loss,
                                                                            self.final_insample_loss)
            if val_ts_loader is not None:
                self.final_outsample_loss = self.evaluate_performance(val_ts_loader, validation_loss_fn=validation_loss_fn)
                string += ", Outsample {}: {:.5f}".format(self.loss, self.final_outsample_loss)
            print(string)
            print('='*30+' End  fitting '+'='*30)

    def predict(self, ts_loader, X_test=None, eval_mode=False):

        ts_loader.eval()
        frequency = ts_loader.get_frequency()

        # Build forecasts
        unique_ids = ts_loader.get_meta_data_var('unique_id')
        last_ds = ts_loader.get_meta_data_var('last_ds') #TODO: ajustar of offset

        batch = next(iter(ts_loader))
        insample_y     = self.to_tensor(batch['insample_y'])
        insample_x     = self.to_tensor(batch['insample_x'])
        insample_mask  = self.to_tensor(batch['insample_mask'])
        outsample_x    = self.to_tensor(batch['outsample_x'])
        outsample_y    = self.to_tensor(batch['outsample_y'])
        outsample_mask = self.to_tensor(batch['outsample_mask'])
        s_matrix       = self.to_tensor(batch['s_matrix'])

        self.model.eval()
        with t.no_grad():
            forecast = self.model(insample_y=insample_y, insample_x_t=insample_x,
                                  insample_mask=insample_mask, outsample_x_t=outsample_x, x_s=s_matrix)

        if eval_mode:
            return forecast, outsample_y, outsample_mask

        # Predictions for panel
        Y_hat_panel = pd.DataFrame(columns=['unique_id', 'ds'])
        for i, unique_id in enumerate(unique_ids):
            Y_hat_id = pd.DataFrame([unique_id]*self.output_size, columns=["unique_id"])
            ds = pd.date_range(start=last_ds[i], periods=self.output_size+1, freq=self.frequency)
            Y_hat_id["ds"] = ds[1:]
            Y_hat_panel = Y_hat_panel.append(Y_hat_id, sort=False).reset_index(drop=True)

        forecast = forecast.cpu().detach().numpy()
        Y_hat_panel['y_hat'] = forecast.flatten()

        if X_test is not None:
            Y_hat_panel = X_test.merge(Y_hat_panel, on=['unique_id', 'ds'], how='left')

        return Y_hat_panel


    def save(self, model_dir, model_id):

        if not os.path.exists(model_dir):
            os.makedirs(model_dir)

        model_file = os.path.join(model_dir, f"model_{model_id}.model")
        print('Saving model to:\n {}'.format(model_file)+'\n')
        t.save({'model_state_dict': self.model.state_dict()}, model_file)

    def load(self, model_dir, model_id):

        model_file = os.path.join(model_dir, f"model_{model_id}.model")
        path = Path(model_file)

        assert path.is_file(), 'No model_*.model file found in this path!'

        print('Loading model from:\n {}'.format(model_file)+'\n')

        checkpoint = t.load(model_file, map_location=self.device)
        self.model.load_state_dict(checkpoint['model_state_dict'])
        self.model.to(self.device)